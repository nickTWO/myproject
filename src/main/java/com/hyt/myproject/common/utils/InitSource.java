package com.hyt.myproject.common.utils;import com.hyt.myproject.common.constant.PayCloudConstants;import org.mybatis.spring.SqlSessionTemplate;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import redis.clients.jedis.JedisPoolConfig;import redis.clients.jedis.JedisShardInfo;import redis.clients.jedis.ShardedJedis;import redis.clients.jedis.ShardedJedisPool;import redis.clients.jedis.exceptions.JedisConnectionException;import java.util.ArrayList;import java.util.List;/** * 初始化资源 */public class InitSource {    private static InitSource source = new InitSource();    private static final Logger logger = LoggerFactory.getLogger(InitSource.class);    private InitSource() {    }    public static synchronized InitSource getInstance() {        return source;    }    /**     * 获取本地数据源     *     * @return     */    public synchronized static SqlSessionTemplate getDBClient() {        SqlSessionTemplate sqlSessionTemplate = (SqlSessionTemplate) PayCloudConstants.applicationContext.getBean("sqlSessionTemplate");        return sqlSessionTemplate;    }    /**     * 切片链接池     */    public static ShardedJedisPool shardedJedisPool = null;    /**     * 初始化     * 2013-9-2 上午11:08:03     */    public static void init() {        initShardedJedisClient();    }    /**     * 分布式 Redis实例 可以做负载均衡     *     * @return     */    public static ShardedJedisPool initShardedJedisClient() {        try {            if (shardedJedisPool == null) {                // 生成多机连接信息列表                List<JedisShardInfo> shards = new ArrayList<JedisShardInfo>();                shards.add(new JedisShardInfo(PayCloudConstants.JEDISIP, PayCloudConstants.JEDISPORT));                //shards.add(new JedisShardInfo(Constant.JEDISIP, Constant.JEDISPORT)); //分布式的时候可以增加多个                // 生成连接池配置信息                JedisPoolConfig config = new JedisPoolConfig();                config.setMaxIdle(200); //jedis最大活跃数                config.setMaxTotal(1000); //最大连接数                config.setMaxWaitMillis(20 * 1000);                config.setTestOnBorrow(true);                // 在应用初始化的时候生成连接池                shardedJedisPool = new ShardedJedisPool(config, shards);            }        } catch (Exception e) {            e.printStackTrace();        }        return shardedJedisPool;    }    /**     * 获取redis实例     *     * @return     */    public static ShardedJedis getShardedJedisClient() {        if (shardedJedisPool == null) {            initShardedJedisClient();        }        ShardedJedis shardedJedis = null;        try {            shardedJedis = shardedJedisPool.getResource();            return shardedJedis;        } catch (JedisConnectionException e) {            if (shardedJedis != null) {                shardedJedis.close();            }        } catch (Exception e) {            logger.error("getShardedJedisClient error:" + e.getMessage());        }        return null;    }    /**     * 释放对象池     * 2013-5-18     */    public static void clearShardedJedisPool(ShardedJedis shardedJedis) {        try {            if (shardedJedis != null) {                shardedJedis.close();// 使用结束后要将jedis放回pool中            }        } catch (JedisConnectionException e) {            if (shardedJedis != null) {                shardedJedis.close();            }        } catch (Exception e) {            e.printStackTrace();        }    }}