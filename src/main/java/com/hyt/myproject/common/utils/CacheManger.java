package com.hyt.myproject.common.utils;import redis.clients.jedis.ShardedJedis;import java.util.HashMap;import java.util.Map;@SuppressWarnings("all")public class CacheManger {    private static String CACHESTYLE = "redis";//memcached    /**     * 公用缓存的set方法:永久     * 2013-5-21     *     * @param key     * @param value     * @return     */    public static int set(String key, String value) {        return set(key, value, 0);    }    /**     * 设置redis方式     *     * @param key     * @param value   值     * @param seconds 时间秒     * @return     */    public static int set(String key, String value, int seconds) {        int setresult = 0;        try {            if ("redis".equals(CACHESTYLE)) {                if (!"OK".equals(value) || !"PONG".equals(value)) {                    ShardedJedis shardedJedis = InitSource.getShardedJedisClient();                    if (shardedJedis == null) {                        return setresult;                    }                    String set = null;                    if (seconds == 0) {                        set = shardedJedis.set(key, value);                    } else {                        set = shardedJedis.setex(key, seconds, value);                    }                    if ("OK".equals(set)) {                        setresult = 1;                    }                    InitSource.clearShardedJedisPool(shardedJedis);                }            } else if ("memcached".equals(CACHESTYLE)) {                setresult = 1;            } else {                setresult = 0;            }            return setresult;        } catch (Exception e) {            e.printStackTrace();        }        return setresult;    }    /**     * 公用缓存的get方法     * 2013-5-21     *     * @param key     * @return     */    public static String get(String key) {        try {            String param = null;            if ("redis".equals(CACHESTYLE)) {                ShardedJedis shardedJedis = InitSource.getShardedJedisClient();                if (shardedJedis == null) {                    return null;                }                param = shardedJedis.get(key);                if ("PONG".equals(param) || "OK".equals(param)) {                    param = null;                }                //System.out.println("********** key="+key+"**********从缓存中拿到值*************value="+param);                InitSource.clearShardedJedisPool(shardedJedis);            } else if ("memcached".equals(CACHESTYLE)) {            } else {            }            return param;        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    /**     * 公用缓存的set Map方法     * 2013-5-21     *     * @param key     * @param hash    Map值     * @param seconds 如果为0,永久保存,否则设置时间     * @return     */    public static int setMap(String key, Map<String, String> hash, int seconds) {        int setresult = 0;        try {            if ("redis".equals(CACHESTYLE)) {                if (hash != null || hash.size() != 0) {                    Map<String, String> map = PayCloudUtils.formMap(hash);                    if (map == null) {                        return 0;                    }                    ShardedJedis shardedJedis = InitSource.getShardedJedisClient();                    if (shardedJedis == null) {                        return setresult;                    }                    String set = shardedJedis.hmset(key, map);                    if (seconds != 0) shardedJedis.expire(key, seconds);  //如果为0,永久保存,否则设置时间                    if ("OK".equals(set)) {                        setresult = 1;                    }                    InitSource.clearShardedJedisPool(shardedJedis);                }            } else if ("memcached".equals(CACHESTYLE)) {                setresult = 1;            } else {                setresult = 0;            }            return setresult;        } catch (Exception e) {            e.printStackTrace();        }        return setresult;    }    /**     * 公用缓存的get方法     * 2013-5-21     *     * @param key     * @return     */    public static Map<String, String> getMap(String key) {        try {            Map<String, String> param = new HashMap<String, String>();            if ("redis".equals(CACHESTYLE)) {                ShardedJedis shardedJedis = InitSource.getShardedJedisClient();                if (shardedJedis == null) {                    return null;                }                param = shardedJedis.hgetAll(key);                if ("PONG".equals(param) || "OK".equals(param)) {                    param = null;                }//				System.out.println("********** key="+key+"**********从缓存中拿到值*************value="+param);                InitSource.clearShardedJedisPool(shardedJedis);            } else if ("memcached".equals(CACHESTYLE)) {            } else {            }            return param;        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    /**     * 删除缓存key     *     * @param key 缓存key     */    public static void del(String key) {        try {            if ("redis".equals(CACHESTYLE)) {                ShardedJedis shardedJedis = InitSource.getShardedJedisClient();                if (shardedJedis == null) {                    return;                }                shardedJedis.del(key);                InitSource.clearShardedJedisPool(shardedJedis);            } else if ("memcached".equals(CACHESTYLE)) {            } else {            }        } catch (Exception e) {            e.printStackTrace();        }    }}